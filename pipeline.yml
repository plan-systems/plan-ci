---

groups:
  - name: dependencies
    jobs:
      - golang-toolchain
      - plan-core
  - name: applications
    jobs:
      - plan-pdi-local
      - plan-client-phost
      - plan-pnode

  # TODO: we don't yet have a good workflow for these
  # - name: unity-applications
  #   jobs:
  #     - plan-client-unity



# ----------------------------------------
# includes for tasks

includes:

  go-check: &go-check
    file: plan-ci-src/tasks/golang-check.yml
    timeout: 10m

  go-release: &go-release
    file: plan-ci-src/tasks/golang-release.yml
    timeout: 5m

# ----------------------------------------

jobs:

  # builds the golang toolchain Docker image that will be
  # used by all our other jobs
  - name: golang-toolchain
    public: true
    max_in_flight: 1
    build_log_retention:
      days: 30
      builds: 100
    plan:
      # TODO: this is pulling the base image twice and we
      #       should fix that for sake of efficiency
      - in_parallel:
        - get: plan-ci-src
        - get: base-toolchain-go
          trigger: true
      - put: plan-toolchain-go
        params:
          build: plan-ci-src/images/plan-toolchain-go

  # runs tests on the core PLAN golang library
  - name: plan-core
    public: true
    max_in_flight: 1
    build_log_retention:
      days: 30
      builds: 100
    plan:
      - in_parallel:
        - get: plan-toolchain-go
          trigger: true
        - get: plan-ci-src
          trigger: true
        - get: plan-core-src
          trigger: true
        - get: plan-protobufs-src
          trigger: true
      - in_parallel:
        - task: build-protobufs
          file: plan-ci-src/tasks/build-protobufs.yml
        - task: check
          <<: *go-check
          vars: { repo: plan-core }

  - name: plan-pdi-local
    public: true
    max_in_flight: 1
    build_log_retention:
      days: 30
      builds: 100
    plan:
      - in_parallel:
        - get: plan-toolchain-go
          trigger: true
        - get: plan-ci-src
          trigger: true
        - get: plan-pdi-local-src
          trigger: true
      - task: check
        <<: *go-check
        vars: { repo: plan-pdi-local }
      - task: release
        <<: *go-release
        vars: { repo: plan-pdi-local }
        on_success:
          in_parallel:
            - put: artifact-publish
              inputs:
                - plan-pdi-local-dist
              params:
                from: "/tmp/build/put/plan-pdi-local-dist/plan-pdi-local_linux_amd64.tar.gz"
                to: "plan-pdi-local/${BUILD_DATETIME}/plan-pdi-local_linux_amd64.tar.gz"
                datefmt: "+%Y%m%dT%H%MZ"
            - put: artifact-publish
              inputs:
                - plan-pdi-local-dist
              params:
                from: "/tmp/build/put/plan-pdi-local-dist/plan-pdi-local_darwin_amd64.tar.gz"
                to: "plan-pdi-local/${BUILD_DATETIME}/plan-pdi-local_darwin_amd64.tar.gz"
                datefmt: "+%Y%m%dT%H%MZ"
            - put: artifact-publish
              inputs:
                - plan-pdi-local-dist
              params:
                from: "/tmp/build/put/plan-pdi-local-dist/plan-pdi-local_windows_amd64.tar.gz"
                to: "plan-pdi-local/${BUILD_DATETIME}/plan-pdi-local_windows_amd64.tar.gz"
                datefmt: "+%Y%m%dT%H%MZ"


  - name: plan-client-phost
    public: true
    max_in_flight: 1
    build_log_retention:
      days: 30
      builds: 100
    plan:
      - in_parallel:
        - get: plan-toolchain-go
          trigger: true
        - get: plan-ci-src
          trigger: true
        - get: plan-client-phost-src
          trigger: true
      - task: check
        <<: *go-check
        vars: { repo: plan-client-phost }
      - task: release
        <<: *go-release
        vars: { repo: plan-client-phost }
        on_success:
          in_parallel:
            - put: artifact-publish
              inputs:
                - plan-client-phost-dist
              params:
                from: "/tmp/build/put/plan-client-phost-dist/plan-client-phost_linux_amd64.tar.gz"
                to: "plan-client-phost/${BUILD_DATETIME}/plan-client-phost_linux_amd64.tar.gz"
                datefmt: "+%Y%m%dT%H%MZ"
            - put: artifact-publish
              inputs:
                - plan-client-phost-dist
              params:
                from: "/tmp/build/put/plan-client-phost-dist/plan-client-phost_darwin_amd64.tar.gz"
                to: "plan-client-phost/${BUILD_DATETIME}/plan-client-phost_darwin_amd64.tar.gz"
                datefmt: "+%Y%m%dT%H%MZ"
            - put: artifact-publish
              inputs:
                - plan-client-phost-dist
              params:
                from: "/tmp/build/put/plan-client-phost-dist/plan-client-phost_windows_amd64.tar.gz"
                to: "plan-client-phost/${BUILD_DATETIME}/plan-client-phost_windows_amd64.tar.gz"
                datefmt: "+%Y%m%dT%H%MZ"


  - name: plan-pnode
    public: true
    max_in_flight: 1
    build_log_retention:
      days: 30
      builds: 100
    plan:
      - in_parallel:
        - get: plan-toolchain-go
          trigger: true
        - get: plan-ci-src
          trigger: true
        - get: plan-pnode-src
          trigger: true
      - task: check
        <<: *go-check
        vars: { repo: plan-pnode }
      - task: release
        <<: *go-release
        vars: { repo: plan-pnode }
        on_success:
          in_parallel:
            - put: artifact-publish
              inputs:
                - plan-pnode-dist
              params:
                from: "/tmp/build/put/plan-pnode-dist/plan-pnode_linux_amd64.tar.gz"
                to: "plan-pnode/${BUILD_DATETIME}/plan-pnode_linux_amd64.tar.gz"
                datefmt: "+%Y%m%dT%H%MZ"
            - put: artifact-publish
              inputs:
                - plan-pnode-dist
              params:
                from: "/tmp/build/put/plan-pnode-dist/plan-pnode_darwin_amd64.tar.gz"
                to: "plan-pnode/${BUILD_DATETIME}/plan-pnode_darwin_amd64.tar.gz"
                datefmt: "+%Y%m%dT%H%MZ"
            - put: artifact-publish
              inputs:
                - plan-pnode-dist
              params:
                from: "/tmp/build/put/plan-pnode-dist/plan-pnode_windows_amd64.tar.gz"
                to: "plan-pnode/${BUILD_DATETIME}/plan-pnode_windows_amd64.tar.gz"
                datefmt: "+%Y%m%dT%H%MZ"


resource_types:

  - name: http-publish
    type: docker-image
    source:
      repository: machinistlabs/concourse-http-publish
      tag: latest


resources:

  # --------------------------------------
  # resources internal to CI

  # defines the base Docker image we'll use for the golang toolchain.
  # bump this whenever we switch to a new version of golang across the
  # project. we check this once a week for updates.
  - name: base-toolchain-go
    type: docker-image
    icon: docker
    check_every: 168h
    public: true
    source:
      email: ((docker-hub-email))
      username: ((docker-hub-username))
      password: ((docker-hub-password))
      repository: golang
      tag: 1.12-stretch

  # defines the completed golang toolchain, including protobufs tooling
  # and anything else we need to build the applications. we'll push this
  # container image to the Docker Hub as part of our build process.
  - name: plan-toolchain-go
    type: docker-image
    icon: docker
    source:
      email: ((docker-hub-email))
      username: ((docker-hub-username))
      password: ((docker-hub-password))
      repository: machinistlabs/plan-toolchain-go

  # uploads our build artifacts to a web server
  - name: artifact-publish
    type: http-publish
    icon: file-upload
    source:
      url: ((http-publish-url))
      username: ((http-publish-username))
      password: ((http-publish-password))

  # this repo!
  - name: plan-ci-src
    type: git
    icon: github-circle
    source:
      uri: https://github.com/plan-systems/plan-ci
      branch: master

  # --------------------------------------
  # our project repos

  - name: plan-client-phost-src
    type: git
    icon: github-circle
    source:
      uri: https://github.com/plan-systems/plan-client-phost
      branch: gomod_experiment

  # - name: plan-client-unity-src
  #   type: git
  #   icon: github-circle
  #   source:
  #     uri: https://github.com/plan-systems/plan-client-unity
  #     branch: master

  - name: plan-core-src
    type: git
    icon: github-circle
    source:
      uri: https://github.com/plan-systems/plan-core
      branch: gomod_experiment

  - name: plan-pdi-local-src
    type: git
    icon: github-circle
    source:
      uri: https://github.com/plan-systems/plan-pdi-local
      branch: gomod_experiment

  - name: plan-pnode-src
    type: git
    icon: github-circle
    source:
      uri: https://github.com/plan-systems/plan-pnode
      branch: gomod_experiment

  - name: plan-protobufs-src
    type: git
    icon: github-circle
    source:
      uri: https://github.com/plan-systems/plan-protobufs
      branch: master
