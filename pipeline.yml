---

groups:
  - name: dependencies
    jobs:
      - golang-toolchain
      - plan-core
  - name: applications
    jobs:
      - plan-pdi-local
      - plan-client-phost
      - plan-pnode

  # TODO: we don't yet have a good workflow for these
  # - name: unity-applications
  #   jobs:
  #     - plan-client-unity



# ----------------------------------------
# includes for tasks

includes:

  go-get: &go-get
    file: plan-ci-src/tasks/golang-get.yml

  go-test: &go-test
    file: plan-ci-src/tasks/golang-unit-test.yml
    timeout: 10m

  go-lint: &go-lint
    file: plan-ci-src/tasks/golang-lint.yml
    timeout: 10m

  go-fmt: &go-fmt
    file: plan-ci-src/tasks/golang-fmt.yml
    timeout: 10m

  go-build-windows: &go-build-windows
    file: plan-ci-src/tasks/golang-build.yml
    timeout: 10m

  go-build-macos: &go-build-macos
    file: plan-ci-src/tasks/golang-build.yml
    timeout: 10m

  go-build-linux: &go-build-linux
    file: plan-ci-src/tasks/golang-build.yml
    timeout: 10m

# ----------------------------------------

jobs:

  # builds the golang toolchain Docker image that will be
  # used by all our other jobs
  - name: golang-toolchain
    public: true
    max_in_flight: 2
    build_log_retention:
      days: 30
      builds: 100
    plan:
      # TODO: this is pulling the base image twice and we
      #       should fix that for sake of efficiency
      - in_parallel:
        - get: plan-ci-src
        - get: base-toolchain-go
          trigger: true
      - put: plan-toolchain-go
        params:
          build: plan-ci-src/images/plan-toolchain-go

  # runs tests on the core PLAN golang library
  - name: plan-core
    public: true
    max_in_flight: 2
    build_log_retention:
      days: 30
      builds: 100
    plan:
      - in_parallel:
        - get: plan-toolchain-go
          trigger: true
        - get: plan-ci-src
          trigger: true
        - get: plan-core-src
          trigger: true
        - get: plan-protobufs-src
          trigger: true
      - task: go-get
        <<: *go-get
        vars: { repo: plan-core }
      - in_parallel:
        - task: build-protobufs
          file: plan-ci-src/tasks/build-protobufs.yml
        - task: test
          <<: *go-test
          vars: { repo: plan-core }
        - try:
            # TODO: we should fail on linting
            task: lint
            <<: *go-lint
            vars: { repo: plan-core }
        - try:
            task: fmt
            <<: *go-fmt
            vars: { repo: plan-core }


  # TODO: add badges for Github
  #       ref http://engineering.pivotal.io/post/concourse-badges/

  - name: plan-pdi-local
    public: true
    max_in_flight: 2
    build_log_retention:
      days: 30
      builds: 100
    plan:
      - in_parallel:
        - get: plan-toolchain-go
          trigger: true
        - get: plan-ci-src
          trigger: true
        - get: plan-core-src
          trigger: true
        - get: plan-pdi-local-src
          trigger: true
      - task: go-get
        <<: *go-get
        vars: { repo: plan-pdi-local }
      - in_parallel:
        - task: test
          <<: *go-test
          vars: { repo: plan-pdi-local }
        - try:
            # TODO: we should fail on linting
            task: lint
            <<: *go-lint
            vars: { repo: plan-pdi-local }
        - try:
            # TODO: we should fail on linting
            task: fmt
            <<: *go-fmt
            vars: { repo: plan-pdi-local }

      - in_parallel:

        - task: build-linux
          "<<": *go-build-linux
          vars: { repo: plan-pdi-local, goos: linux, goarch: amd64 }
          on_success:
            put: artifact-publish
            params:
              from: go/bin/plan-pdi-local
              to: plan-pdi-local
              os: linux
              arch: amd64
              datefmt: "+%Y%m%dT%H%MZ"
              archive: true

        - task: build-windows
          "<<": *go-build-windows
          vars: { repo: plan-pdi-local, goos: windows, goarch: amd64 }
          on_success:
            put: artifact-publish
            params:
              from: go/bin/plan-pdi-local
              to: plan-pdi-local
              os: windows
              arch: amd64
              datefmt: "+%Y%m%dT%H%MZ"
              archive: true

        - task: build-macos
          "<<": *go-build-macos
          vars: { repo: plan-pdi-local, goos: darwin, goarch: amd64 }
          on_success:
            put: artifact-publish
            params:
              from: go/bin/plan-pdi-local
              to: plan-pdi-local
              os: darwin
              arch: amd64
              datefmt: "+%Y%m%dT%H%MZ"
              archive: true

  - name: plan-client-phost
    public: true
    max_in_flight: 2
    build_log_retention:
      days: 30
      builds: 100
    plan:
      - in_parallel:
        - get: plan-toolchain-go
          trigger: true
        - get: plan-ci-src
          trigger: true
        - get: plan-core-src
          trigger: true
        - get: plan-client-phost-src
          trigger: true
      - task: go-get
        <<: *go-get
        vars: { repo: plan-client-phost }
      - in_parallel:
        - task: test
          <<: *go-test
          vars: { repo: plan-client-phost }
        - try:
            task: lint
            <<: *go-lint
            vars: { repo: plan-client-phost }
        - try:
            task: fmt
            <<: *go-fmt
            vars: { repo: plan-client-phost }
      - in_parallel:
        - task: build-linux
          "<<": *go-build-linux
          vars: { repo: plan-client-phost, goos: linux, goarch: amd64 }
          on_success:
            put: artifact-publish
            params:
              from: go/bin/plan-client-phost
              to: plan-client-phost
              os: linux
              arch: amd64
              datefmt: "+%Y%m%dT%H%MZ"
              archive: true

        - task: build-windows
          "<<": *go-build-windows
          vars: { repo: plan-client-phost, goos: windows, goarch: amd64 }
          on_success:
            put: artifact-publish
            params:
              from: go/bin/plan-client-phost
              to: plan-client-phost
              os: windows
              arch: amd64
              datefmt: "+%Y%m%dT%H%MZ"
              archive: true

        - task: build-macos
          "<<": *go-build-macos
          vars: { repo: plan-client-phost, goos: darwin, goarch: amd64 }
          on_success:
            put: artifact-publish
            params:
              from: go/bin/plan-client-phost
              to: plan-client-phost
              os: darwin
              arch: amd64
              datefmt: "+%Y%m%dT%H%MZ"
              archive: true


  - name: plan-pnode
    public: true
    max_in_flight: 2
    build_log_retention:
      days: 30
      builds: 100
    plan:
      - in_parallel:
        - get: plan-toolchain-go
          trigger: true
        - get: plan-ci-src
          trigger: true
        - get: plan-core-src
          trigger: true
        - get: plan-pnode-src
          trigger: true
      - task: go-get
        <<: *go-get
        vars: { repo: plan-pnode }
      - in_parallel:
        - task: test
          <<: *go-test
          vars: { repo: plan-pnode }
        - try:
            task: lint
            <<: *go-lint
            vars: { repo: plan-pnode }
        - try:
            task: fmt
            <<: *go-fmt
            vars: { repo: plan-pnode }

      - in_parallel:

        - task: build-linux
          "<<": *go-build-linux
          vars: { repo: plan-pnode, goos: linux, goarch: amd64 }
          on_success:
            put: artifact-publish
            params:
              from: go/bin/plan-pnode
              to: plan-pnode
              os: linux
              arch: amd64
              datefmt: "+%Y%m%dT%H%MZ"
              archive: true

        - task: build-windows
          "<<": *go-build-windows
          vars: { repo: plan-pnode, goos: windows, goarch: amd64 }
          on_success:
            put: artifact-publish
            params:
              from: go/bin/plan-pnode
              to: plan-pnode
              os: windows
              arch: amd64
              datefmt: "+%Y%m%dT%H%MZ"
              archive: true

        - task: build-macos
          "<<": *go-build-macos
          vars: { repo: plan-pnode, goos: darwin, goarch: amd64 }
          on_success:
            put: artifact-publish
            params:
              from: go/bin/plan-pnode
              to: plan-pnode
              arch: amd64
              datefmt: "+%Y%m%dT%H%MZ"
              archive: true
              os: darwin


resource_types:

  - name: http-publish
    type: docker-image
    source:
      repository: machinistlabs/concourse-http-publish
      tag: latest


resources:

  # --------------------------------------
  # resources internal to CI

  # defines the base Docker image we'll use for the golang toolchain.
  # bump this whenever we switch to a new version of golang across the
  # project. we check this once a week for updates.
  - name: base-toolchain-go
    type: docker-image
    icon: docker
    check_every: 168h
    public: true
    source:
      email: ((docker-hub-email))
      username: ((docker-hub-username))
      password: ((docker-hub-password))
      repository: golang
      tag: 1.12-stretch

  # defines the completed golang toolchain, including protobufs tooling
  # and anything else we need to build the applications. we'll push this
  # container image to the Docker Hub as part of our build process.
  - name: plan-toolchain-go
    type: docker-image
    icon: docker
    source:
      email: ((docker-hub-email))
      username: ((docker-hub-username))
      password: ((docker-hub-password))
      repository: machinistlabs/plan-toolchain-go

  # uploads our build artifacts to a web server
  - name: artifact-publish
    type: http-publish
    icon: docker
    source:
      url: ((http-publish-url))
      username: ((http-publish-username))
      password: ((http-publish-password))

  # this repo!
  - name: plan-ci-src
    type: git
    icon: github-circle
    source:
      uri: https://github.com/plan-systems/plan-ci
      branch: testing

  # --------------------------------------
  # our project repos

  - name: plan-client-phost-src
    type: git
    icon: github-circle
    source:
      uri: https://github.com/plan-systems/plan-client-phost
      branch: master

  # - name: plan-client-unity-src
  #   type: git
  #   icon: github-circle
  #   source:
  #     uri: https://github.com/plan-systems/plan-client-unity
  #     branch: master

  - name: plan-core-src
    type: git
    icon: github-circle
    source:
      uri: https://github.com/plan-systems/plan-core
      branch: master

  - name: plan-pdi-local-src
    type: git
    icon: github-circle
    source:
      uri: https://github.com/plan-systems/plan-pdi-local
      branch: master

  - name: plan-pnode-src
    type: git
    icon: github-circle
    source:
      uri: https://github.com/plan-systems/plan-pnode
      branch: master

  - name: plan-protobufs-src
    type: git
    icon: github-circle
    source:
      uri: https://github.com/plan-systems/plan-protobufs
      branch: master
